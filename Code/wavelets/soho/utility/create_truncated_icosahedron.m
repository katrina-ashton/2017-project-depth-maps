function ico = create_truncated_icosahedron()
%
% function ico = create_truncated_icosahedron()
%
% Note: The vertex and face data is from MathWorld Packages available at
% http://library.wolfram.com/infocenter/MathSource/4775 (package Archimedean.m)

  ico(1) = stri( [1 0 0; 0 0 1; 0 1 0]);

  verts = getVerts();
  
  faces = getFaces();
  
  
  for( i = 1 : numel( faces))
    
    i_verts = faces{i};
    % we want to have closed polygons
    % i_verts = [i_verts i_verts(1)];
    
    c_verts = verts( :, i_verts);

    % triangulate
    temp = stri( [c_verts(:,1), c_verts(:,2),  c_verts(:,3)]);
    temp = setColor( temp, size( c_verts, 2));
    ico(end + 1) = temp;
    
    for( j = 3 : (size( c_verts, 2) - 1))
      temp = stri( [ c_verts(:,1), c_verts(:,j),  c_verts(:,j+1)]);
      temp = setColor( temp, size( c_verts, 2));
      ico(end + 1) = temp;
    end
      
  end
  
  % remove the dummy element at the beginning
  ico = ico( 2 : end);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function verts = getVerts()
% The vertex data is from MathWorld Packages available at
% http://library.wolfram.com/infocenter/MathSource/4775
% (In package Archimedean.m)

verts =[-0.16245984811645316308,-2.1180339887498948482,1.2759762125280598983;...
 -0.16245984811645316308,  2.1180339887498948482,   1.2759762125280598983;...
 0.16245984811645316308,  -2.1180339887498948482,  -1.2759762125280598983;...
 0.16245984811645316308,   2.1180339887498948482,  -1.2759762125280598983;...
 -0.26286555605956680301, -0.80901699437494742410, -2.3274384367663271103;...
 -0.26286555605956680301, -2.4270509831248422723,  -0.42532540417601996609;...
 -0.26286555605956680301,  0.80901699437494742410, -2.3274384367663271103;...
 -0.26286555605956680301,  2.4270509831248422723,  -0.42532540417601996609;...
 0.26286555605956680301,  -0.80901699437494742410,  2.3274384367663271103;...
 0.26286555605956680301,  -2.4270509831248422723,   0.42532540417601996609;...
 0.26286555605956680301,   0.80901699437494742410,  2.3274384367663271103;...
 0.26286555605956680301,   2.4270509831248422723,   0.42532540417601996609;...
 0.68819096023558676910,  -0.50000000000000000000, -2.3274384367663271103;...
 0.68819096023558676910,   0.50000000000000000000, -2.3274384367663271103;...
 1.2139220723547203751,   -2.1180339887498948482,   0.42532540417601996609;...
 1.2139220723547203751,    2.1180339887498948482,   0.42532540417601996609;...
 -2.0645728807067603073,  -0.50000000000000000000,  1.2759762125280598983;...
 -2.0645728807067603073,   0.50000000000000000000,  1.2759762125280598983;...
 -1.3763819204711735382,  -1.0000000000000000000,   1.8017073246471935043;...
 -1.3763819204711735382,   1.0000000000000000000,   1.8017073246471935043;...
 -1.3763819204711735382,  -1.6180339887498948482,  -1.2759762125280598983;...
 -1.3763819204711735382,   1.6180339887498948482,  -1.2759762125280598983;...
 -0.68819096023558676910, -0.50000000000000000000,  2.3274384367663271103;...
 -0.68819096023558676910,  0.50000000000000000000,  2.3274384367663271103;...
 1.3763819204711735382,   -1.0000000000000000000,  -1.8017073246471935043;...
 1.3763819204711735382,    1.0000000000000000000,  -1.8017073246471935043;...
 1.3763819204711735382,   -1.6180339887498948482,   1.2759762125280598983;...
 1.3763819204711735382,    1.6180339887498948482,   1.2759762125280598983;...
 -1.7013016167040798644,   0,                       -1.8017073246471935043;...
 1.7013016167040798644,    0,                       1.8017073246471935043;...
 -1.2139220723547203751,  -2.1180339887498948482,  -0.42532540417601996609;...
 -1.2139220723547203751,   2.1180339887498948482,  -0.42532540417601996609;...
 -1.9641671727636466674,  -0.80901699437494742410, -1.2759762125280598983;...
 -1.9641671727636466674,   0.80901699437494742410, -1.2759762125280598983;...
 2.0645728807067603073,   -0.50000000000000000000, -1.2759762125280598983;...
 2.0645728807067603073,    0.50000000000000000000, -1.2759762125280598983;...
 2.2270327288232134704,   -1.0000000000000000000,  -0.42532540417601996609;...
 2.2270327288232134704,    1.0000000000000000000,  -0.42532540417601996609;...
 2.3894925769396666335,   -0.50000000000000000000,  0.42532540417601996609;...
 2.3894925769396666335,    0.50000000000000000000,  0.42532540417601996609;...
 -1.1135163644116067352,  -1.8090169943749474241,   1.2759762125280598983;...
 -1.1135163644116067352,   1.8090169943749474241,   1.2759762125280598983;...
 1.1135163644116067352,   -1.8090169943749474241,  -1.2759762125280598983;...
 1.1135163644116067352,    1.8090169943749474241,  -1.2759762125280598983;...
 -2.3894925769396666335,  -0.50000000000000000000, -0.42532540417601996609;...
 -2.3894925769396666335,   0.50000000000000000000, -0.42532540417601996609;...
 -1.6392474765307403412,  -1.8090169943749474241,   0.42532540417601996609;...
 -1.6392474765307403412,   1.8090169943749474241,   0.42532540417601996609;...
 1.6392474765307403412,   -1.8090169943749474241,  -0.42532540417601996609;...
 1.6392474765307403412,    1.8090169943749474241,  -0.42532540417601996609;...
 1.9641671727636466674,   -0.80901699437494742410, 1.2759762125280598983;...
 1.9641671727636466674,    0.80901699437494742410, 1.2759762125280598983;...
 0.85065080835203993218,   0,                      2.3274384367663271103;...
 -2.2270327288232134704,  -1.0000000000000000000,  0.42532540417601996609;...
 -2.2270327288232134704,   1.0000000000000000000,  0.42532540417601996609;...
 -0.85065080835203993218,  0,                      -2.3274384367663271103;...
 -0.52573111211913360603, -1.6180339887498948482,  -1.8017073246471935043;...
 -0.52573111211913360603,  1.6180339887498948482,  -1.8017073246471935043;...
 0.52573111211913360603,  -1.6180339887498948482,  1.8017073246471935043;...
 0.52573111211913360603,   1.6180339887498948482,  1.8017073246471935043]';...

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function faces = getFaces()

  faces = ...
  { [53,11,24,23,9], ...
    [51,39,40,52,30], ...
    [60,28,16,12,2], ...
    [20,42,48,55,18], ...
    [19,17,54,47,41], ...
    [1,10,15,27,59], ...
    [36,26,44,50,38], ...
    [4,58,22,32,8], ...
    [34,29,33,45,46], ...
    [21,57,3,6,31], ...
    [37,49,43,25,35], ...
    [13,5,56,7,14], ...
    [9,59,27,51,30,53], ...
    [53,30,52,28,60,11], ...
    [11,60,2,42,20,24], ...
    [24,20,18,17,19,23], ...
    [23,19,41,1,59,9], ...
    [13,25,43,3,57,5], ...
    [5,57,21,33,29,56], ...
    [56,29,34,22,58,7], ...
    [7,58,4,44,26,14], ...
    [14,26,36,35,25,13], ...
    [40,38,50,16,28,52], ...
    [16,50,44,4,8,12], ...
    [12,8,32,48,42,2], ...
    [48,32,22,34,46,55], ...
    [55,46,45,54,17,18], ...
    [54,45,33,21,31,47], ...
    [47,31,6,10,1,41], ...
    [10,6,3,43,49,15], ...
    [15,49,37,39,51,27], ...
    [39,37,35,36,38,40] };
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function st = setColor( st, num_verts)
% Set the color of the spherical triangle according to the number of
% vertices in the "parent" polygon

  if( 5 == num_verts)
    st = setData( st, [0 0 0]');
  elseif( 6 == num_verts)
    st = setData( st, [255 255 255]');
  else
    assert( 0, 'Unexpected number of vertices.');
  end
    
end